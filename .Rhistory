library(caret)
library(data.table)
library(Metrics)
library(dplyr)
library(tidyverse)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
View(covar)
View(example)
View(train)
View(test)
View(covar)
View(covar)
View(covar)
View(example)
model <- train(ic50_Omicron ~ ., data = train, method = "lm")
train <- na.omit(train)
test <- na.omit(test)
View(train)
View(test)
View(test)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
View(test)
View(train)
lm_model <- lm(ic50_Omicron ~ age + sex + centre + dose_2 + dose_3  + PriorSxAtFirstVisit + days_sinceDose2 + days_dose12interval + posTest_beforeVisit, data = train)
lm_model <- lm(ic50_Omicron ~ age + sex + centre + dose_2 + dose_3  + priorSxAtFirstVisit + days_sinceDose2 + days_dose12interval + posTest_beforeVisit, data = train)
summary(lm_model)
lm_model <- lm(ic50_Omicron ~ age + centre + dose_2 + dose_3  + priorSxAtFirstVisit + days_sinceDose2 + days_dose12interval + posTest_beforeVisit, data = train)
summary(lm_model)
test$ic50_Omicron <- predict(lm_model, newdata = test)
View(test)
submit <- select(test, sample_id, ic50_Omicron)
View(submit)
write_csv(submit, path = "submit.csv")
lm_model <- lm(ic50_Omicron ~ ., data = train)
library(caret)
library(data.table)
library(Metrics)
library(dplyr)
library(tidyverse)
model <- glm(result ~ ., data = train[, -1], family = "binomial")
model <- glm(result ~ ., data = train[, -1], family = "binomial")
test$result <- NULL
View(test)
test$result <- NULL
merged_data <- merge(train, covar, by = "sample_id")
test$ic50_Omicron <- NULL
View(merged_data)
lm_model <- lm(ic50_Omicron ~ ., data = train)
model <- lm(icomicron_50 ~ ., data = merged_data)
View(train)
model <- lm(ic50_omicron ~ ., data = merged_data)
model <- lm(ic50_Omicron ~ ., data = merged_data)
lm_model <- lm(ic50_Omicron ~ ., data = train)
str(train)
str(covar)
str(train)
rain[is.na(train)] <- mean(train, na.rm = TRUE)
train[is.na(train)] <- mean(train, na.rm = TRUE)
str(train)
for (col in names(train)) {
if (is.numeric(train[[col]])) {
train[[col]][is.na(train[[col]])] <- mean(train[[col]], na.rm = TRUE)
} else if (is.factor(train[[col]])) {
train[[col]] <- as.character(train[[col]])  # Convert factors to character
train[[col]][is.na(train[[col]])] <- as.character(which.max(table(train[[col]])))
train[[col]] <- as.factor(train[[col]])  # Convert back to factor
} else if (is.integer(train[[col]])) {
train[[col]][is.na(train[[col]])] <- as.integer(which.max(table(train[[col]])))
}
}
train$ic50_Omicron <- as.numeric(train$ic50_Omicron)
model <- lm(ic50_Omicron ~ ., data = merged_data)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
View(covar)
View(covar)
View(covar)
model <- lm(ic50_Omicron ~ ., data = train_merged)
model <- lm(ic50_Omicron ~ ., data = merged_data)
View(covar)
View(train)
View(test)
View(test)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
numeric_cols <- sapply(train, is.numeric)
train[numeric_cols] <- lapply(train[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
test[numeric_cols] <- lapply(test[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
str(train)
train[numeric_cols] <- lapply(train[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
test[numeric_cols] <- lapply(test[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
View(train)
View(test)
str(train)
View(train)
test$ic50_Omicron <- NULL
View(test)
test$ic50_Omicron <- NULL
test$ic50_Omicron <- 0
View(test)
test[numeric_cols] <- lapply(test[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
str(train)
factor_cols <- sapply(train, is.factor)
for (col in names(train)[factor_cols]) {
# Convert factor columns to character for imputation
train[[col]] <- as.character(train[[col]])
test[[col]] <- as.character(test[[col]])
# Compute mode for train dataset
mode_train <- names(sort(table(train[[col]]), decreasing = TRUE))[1]
# Impute missing values with mode
train[[col]][is.na(train[[col]])] <- mode_train
test[[col]][is.na(test[[col]])] <- mode_train  # Use the same mode for test dataset
# Convert back to factor after imputation
train[[col]] <- as.factor(train[[col]])
test[[col]] <- as.factor(test[[col]])
View(train)
View(train)
View(train)
View(train)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
test$ic50_Omicron <- 0
str(train)
numeric_cols <- sapply(train, is.numeric)
train[numeric_cols] <- lapply(train[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
test[numeric_cols] <- lapply(test[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
View(train)
View(train)
str(train)
View(train)
View(train)
library(caret)
library(data.table)
library(Metrics)
library(dplyr)
library(tidyverse)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
test$ic50_Omicron <- 0
str(train)
numeric_cols <- sapply(train, is.numeric)
train[numeric_cols] <- lapply(train[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
test[numeric_cols] <- lapply(test[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
model <- lm(ic50_Omicron ~ age + sex + centre + dose_2 + dose_3 + Sx_severity_most_recent + priorSxAtFirstVisit + priorSxAtFirstVisitSeverity + days_sinceDose2 + days_sinceDose3 + days_dose12interval + days_dose23interval + days_sinceSxLatest + days_sincePosTest_latest + posTest_beforeVisit, data = train)
summary(model)
test$ic50_Omicron <- predict(model, newdata = test)
test$ic50_Omicron <- abs(test$ic50_Omicron)
submit <- select(test, sample_id, ic50_Omicron)
write_csv(submit, path = "submit.csv")
library(caret)
library(data.table)
library(Metrics)
library(dplyr)
library(tidyverse)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
test$ic50_Omicron <- 0
str(train)
numeric_cols <- sapply(train, is.numeric)
train[numeric_cols] <- lapply(train[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
test[numeric_cols] <- lapply(test[numeric_cols], function(x) ifelse(is.na(x), mean(x, na.rm = TRUE), x))
model <- lm(ic50_Omicron ~ age + sex + centre + dose_2 + dose_3 + Sx_severity_most_recent + priorSxAtFirstVisit + priorSxAtFirstVisitSeverity + days_sinceDose2 + days_sinceDose3 + days_dose12interval + days_dose23interval + days_sinceSxLatest + days_sincePosTest_latest + posTest_beforeVisit, data = train)
summary(model)
test$ic50_Omicron <- predict(model, newdata = test)
submit <- select(test, sample_id, ic50_Omicron)
write_csv(submit, path = "submit.csv")
View(submit)
View(submit)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
test$ic50_Omicron <- 0
merged_train <- merge(train, covar, by = "sample_id")
merged_test <- merge(test, covar, by = "sample_id")
# Handle missing values in merged_train (if needed)
merged_train[is.na(merged_train)] <- 0  # Impute missing values with 0 (for binary variables)
# Separate predictors and response variable in merged_train
x_train <- merged_train[, -1]  # Exclude the response variable
y_train <- merged_train$ic50_Omicron
model <- glmnet(x_train, y_train, alpha = 1)
# Train the model using glmnet
library(glmnet)
model <- glmnet(x_train, y_train, alpha = 1)
# Prepare the test dataset
merged_test <- merge(test, covar, by = "sample_id")
# Make predictions using the trained model
x_test <- merged_test  # Assuming preprocessing steps are completed
predictions <- predict(model, newx = x_test)
submission <- data.frame(sample_id = merged_test$sample_id, ic50_Omicron = predictions)
# Write the submission to a CSV file
write.csv(submission, file = "submit.csv", row.names = FALSE)
merged_train <- merge(train, covar, by = "sample_id")
# Handle missing values in merged_train (if needed)
merged_train[is.na(merged_train)] <- 0  # Impute missing values with 0 (for binary variables)
# Separate predictors and response variable in merged_train
x_train <- merged_train[, -1]  # Exclude the response variable
y_train <- merged_train$ic50_Omicron
# Train the model using glmnet
library(glmnet)
model <- glmnet(x_train, y_train, alpha = 1)
# Prepare the test dataset
merged_test <- merge(test, covar, by = "sample_id")
# Handle missing values and encode categorical variables in merged_test (if needed)
# Ensure that the preprocessing steps are consistent with those applied to the training data
# Make predictions using the trained model
x_test <- merged_test  # Assuming preprocessing steps are completed
predictions <- predict(model, newx = x_test)
model <- glmnet(x_train, y_train, alpha = 1)
# Prepare the test dataset
merged_test <- merge(test, covar, by = "sample_id")
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
merged_train <- merge(train, covar, by = "sample_id")
# Handle missing values in merged_train (if needed)
merged_train[is.na(merged_train)] <- 0  # Impute missing values with 0 (for binary variables)
# Separate predictors and response variable in merged_train
x_train <- merged_train[, -1]  # Exclude the response variable
y_train <- merged_train$ic50_Omicron
# Train the model using glmnet
library(glmnet)
model <- glmnet(x_train, y_train, alpha = 1)
# Prepare the test dataset
merged_test <- merge(test, covar, by = "sample_id")
# Make predictions using the trained model
x_test <- merged_test  # Assuming preprocessing steps are completed
predictions <- predict(model, newx = x_test)
# Make predictions using the trained model
x_test <- merged_test  # Assuming preprocessing steps are completed
predictions <- predict(model, newx = x_test)
predictions <- predict(model, newx = x_test)
x_test <- as.matrix(x_test)
predictions <- predict(model, newx = x_test)
View(x_test)
predictions <- predict(model, newx = x_test)
train <- read.csv("C://Users//zachh//Data//Stat_380_train.csv")
test <- read.csv("C://Users//zachh//Data//Stat_380_test.csv")
covar <- read.csv("C://Users//zachh//Data//covar_data.csv")
example <- read.csv("C://Users//zachh//Data//Example_Sub.csv")
test$ic50_Omicron <- 0
merged_train <- merge(train, covar, by = "sample_id")
merged_test <- merge(test, covar, by = "sample_id")
merged_train <- merge(train, covar, by = "sample_id")
# Handle missing values in merged_train (if needed)
merged_train[is.na(merged_train)] <- 0  # Impute missing values with 0 (for binary variables)
# Separate predictors and response variable in merged_train
x_train <- merged_train[, -1]  # Exclude the response variable
y_train <- merged_train$ic50_Omicron
# Train the model using glmnet
library(glmnet)
model <- glmnet(x_train, y_train, alpha = 1)
# Prepare the test dataset
merged_test <- merge(test, covar, by = "sample_id")
# Make predictions using the trained model
x_test <- merged_test  # Assuming preprocessing steps are completed
predictions <- predict(model, newx = x_test)
View(predictions)
